회사에서 코딩 교육을 받으면서 multi thread 환경에서 HashMap을 사용해야 할 상황이 생겼었다.
나는 별생각없이 HashMap을 사용해서 thread들이 그냥 HashMap에 접근할수 있도록 하였다.
하지만 코드리뷰를 하면서 Multi thread 환경에서 그냥 HashMap을 사용하게 되면 HashMap이 thread safe하지 않다고 했고 ConcurrentHashMap을 쓰라고 하셨다.

그래서 이번엔 Threaed safe한것은 무엇인지 그리고 ConcurrentHashMap이 뭔지에 대해서 알아볼 예정이다.

일단 가장 먼저 Thread safe 한것이 무엇인지부터 알아보자.


Thread safe란?
Thread safe란 multi thread 프로그래밍에서 Thread 들이 공유 자원에 동시에 접근 해도 프로그램 실행에 문제가 없고 공유자원에 문제 없이 다 접근하는것을 뜻한다.
쉽게 말하자면 여러 Thread들이 동시에 공유자원에 접근을 하더라도 공유 자원에 문제가 생기지 않는다는것이다.

그럼 이제 Thread safe가 뭔지 알았으니 이제 ConcurrentHashMap에 대해서 알아보자.


ConcurrentHashMap이란?
ConcurrentHashMap은 thread safe를 보장하면서도 높은 성능을 보장하는 HashMap을 뜻한다.
즉 thread safe한 HashMap이라고 보면 된다.

사실 thread safe한 map은 ConcurrentHashMap 말고도 HashTable이라는것이 존재하기는 한다.
근데 어떤 측면에서 ConcurrentHashMap의 성능이 높은것일까?

HashTable은 기존의 thread safe하지 못한 HashMap의 단점을 보완해서 만든것이다.
그래서 HashTable의 코드를 직접 들어가서 확인을 해보게 되면 아래와 같이 나온다.

public class Hashtable<K,V>
    extends Dictionary<K,V>
    implements Map<K,V>, Cloneable, java.io.Serializable {

    public synchronized int size() { }

    @SuppressWarnings("unchecked")
    public synchronized V get(Object key) { }

    public synchronized V put(K key, V value) { }
}

이렇게 get과 put 앞에 다른 thread의 사용을 막는 synchronized 를 사용해서 한번에 하나의 thread 만 접근할수 있게 lock을 걸어놨다.
lock을 걸게 되면 일단 다른 thread 들은 사용하지 못하므로 오버헤드가 발생하게 된다. 심각하면 다른 thread 들은 계속해서 작업을 기다리는
병목현상이 생길수도 있다. 따라서 HashTable은 성능이 좋지 못한다.
그런 현상들을 보완하기위해서 자바버전 5 이상부터 만든것이 ConcurrentHashTable이다.

ConcurrentHashMap 코드를 자세히 들여다 보면 get()에는 synchronized가 붙여져 있지 않다.

public class ConcurrentHashMap<K,V> extends AbstractMap<K,V>
    implements ConcurrentMap<K,V>, Serializable {

    public V get(Object key) {}

    public boolean containsKey(Object key) { }

  public V put(K key, V value) {
        return putVal(key, value, false);
    }

    /** Implementation for put and putIfAbsent */
    final V putVal(K key, V value, boolean onlyIfAbsent) {
        if (key == null || value == null) throw new NullPointerException();
        int hash = spread(key.hashCode());
        int binCount = 0;
        
        // 빈 버킷에 노드를 삽입하는 경우 lock을 사용하지 않고 Compare and Swap을 이용해 새로운 노드를 해시 버킷에 삽입한다.

        for (Node<K,V>[] tab = table;;) {
            Node<K,V> f; int n, i, fh;
            

            if (tab == null || (n = tab.length) == 0)
                tab = initTable();
                // 1) 새로운 노드가 들어갈 배열의 인덱스가 비어있는 경우
                // 새로운 노드를 삽입하기 위해, 해당 버킷을 가져와 비어있는지 확인한다.
            else if ((f = tabAt(tab, i = (n - 1) & hash)) == null) {
            // 비어있다면 다시 Node를 담고 있는 volatile 변수에 접근하여 Node와 기댓값을 비교하여 같으면
            // 새로운 노드를 생성하고 아니면 다시 for문으로 돌아간다.
            // 여러 쓰레드에서 쓰기 작업을 할 수 있기 때문에 CAS알고리즘으로 한번더 안전장치를 거친다.
                if (casTabAt(tab, i, null,
                             new Node<K,V>(hash, key, value, null)))
                    break;                   // no lock when adding to empty bin
            }
            else if ((fh = f.hash) == MOVED)
                tab = helpTransfer(tab, f);
            else {
                V oldVal = null;
                
                // 이미 노드가 존재하는 경우는 노드가 존재하는 버킷 객체를 이용해 하나의 스레드만 접근할 수 있도록 한다.
                // 서로 다른 스레드가 같은 해시 버킷에 접근할 때만 해당 블록이 잠기게 된다.
                // synchorinzed 안의 로직은 HashMap과 비슷한 로직이다. 동일한 키면 노드를 새로 바꾸고
                // 해시충돌인 경우 SEperate Chaning에 추가 하거나 TreeNode에 추가하고, TREEFITY_THRESHOLD값에 따라
                // 링크드리스트를 트리로 바꾼다.
                
                synchronized (f) {
                    if (tabAt(tab, i) == f) {
                        if (fh >= 0) {
                            binCount = 1;
                            for (Node<K,V> e = f;; ++binCount) {
                                K ek;
                                
                                // 새로운 노드로 교체된다.
                                if (e.hash == hash &&
                                    ((ek = e.key) == key ||
                                     (ek != null && key.equals(ek)))) {
                                    oldVal = e.val;
                                    if (!onlyIfAbsent)
                                        e.val = value;
                                    break;
                                }
                                
                                
                                Node<K,V> pred = e;
                                
                                // Seperate Chaining에 추가도니다.
                                if ((e = e.next) == null) {
                                    pred.next = new Node<K,V>(hash, key,
                                                              value, null);
                                    break;
                                }
                            }
                        }
                        
                        // 트리에 추가한다. 
                        else if (f instanceof TreeBin) {
                            Node<K,V> p;
                            binCount = 2;
                            if ((p = ((TreeBin<K,V>)f).putTreeVal(hash, key,
                                                           value)) != null) {
                                oldVal = p.val;
                                if (!onlyIfAbsent)
                                    p.val = value;
                            }
                        }
                    }
                }
                if (binCount != 0) {
                    if (binCount >= TREEIFY_THRESHOLD)
                        treeifyBin(tab, i);
                    if (oldVal != null)
                        return oldVal;
                    break;
                }
            }
        }
        addCount(1L, binCount);
        return null;
    }

그리고 put 할때는 put() 메소드 자체에는 sychronized가 붙여져 있지 않고 이미 있는 데이터를 집어 넣을때 옛날 노드 안에 있는 데이터를 빼내고 새로 교체하는 부분에서민
sychronized를 사용하게 된다.
따라서 ConcurrentHashMap이 훨씬 좋다는것을 알수가 있다.

그래서 Multi Thread 상황에서 read write가 빈번한 상황에서는 ConcurrentHashMap을 사용하는것이 훨씬 효율적인거라는것을 알수가 있다.
read만 하는 상황이라면 volatile을 사용하면 된다.
