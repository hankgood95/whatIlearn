회사에서 코드 리뷰를 하고 나서 사수분께서 리팩토링 해주신 코드에서 내가 생전 처음보는 코드가 있었다.
클래스 인스턴스를 생성하기는 하는데 기존의 new 를 통해서 클래스 인스턴스를 생성하는것이 아닌 이상한 newInstance() 라는 함수를 사용해서 인스턴스를 생성하는것이였다.

그래서 newInstance() 를 사용해서 인스턴스를 생성하는것이 동적으로 인스턴스를 생성하는것이라는것을 알고 이번엔 동적 인스턴스 생성에 대해서 알아보려고 한다.

동적 인스턴스 생성이란?
보통 우리가 인스턴스를 생성하게 되면 아래와 같이 클래스를 생성하게 된다.
TestClass test = new TestClass();
이렇게 생성을 하게 되면 우리는 컴파일 타임에 인스턴스의 클래스 타입을 지정하게 된다.
하지만 우리가 동적으로 인스턴스의 클래스 타입을 지정하고 싶을때가 있을수 있다.
그럴때 사용하는것이 동적 인스턴스 생성이다.

------------------------------------------------------------------------------------------------------------------------------

동적 인스턴스 생성의 장단점

장점
1. 결합 감소 : 클래스를 동적으로 인스턴스화 하여 클래스 간의 결합을 줄일수 있다.
2. 향상된 확장성 : 기존 코드를 수정할 필요 없이 주어지는 변수 값에 따라서 새 클래스 인스턴스를 만들수가 있어 코드의 확장성이 굉장히 좋다.
3. 향상된 코드 재사용 : 공통 인터페이스를 구현하거나 공통 기본 클래스를 상송하는 인스턴스를 만들어서 코드의 재사용이 가능해진다.
4. 리플렉션 : 런타임시 클래스 내부 구조를 검사하고 조작할수 있는 Java의 리플렉션 개념과 관련되어 있다. 
리플렉션을 사용하면 동적 인스턴스화 뿐만 아니라 해당 메소드와 필드에 액세스 할수 있어 다양한 유형의 클래스와 작동하는 것과 같은 
다양한 시나리오에 적용이 가능하다.

단점
1. 성능 오버헤드 : new 를 사용하여 인스턴스를 생성하는것보다 느릴수가 있다. 왜냐하면 클래스를 동적 로드하고 권한 확인하는 등의 작업이 생길수 있어 
성능이 new 보다는 조금 느리다.
2. 타입 안정성 : 인스턴스화는 컴파일 시간에 타입을 알지 못한채 클래스의 인스턴스를 생성하기 때문에 코드의 타입 안정성을 떨어뜨릴수 있다.
3. 보안 위험 : 신뢰할수 없는 코드가 런타임시 임의의 클래스를 로드하고 실행할수 있기 때문에 보안에 문제가 생길수가 있다.
4. 복잡성 : 런타임시 클래스 내부를 조작하기 위해 사용하는 리플렉션을 사용하게 되면 코드가 복잡해지고 이해하기 어려워 질수 있다.


그렇다면 동적으로 인스턴스를 생성하는 방법에 대해서 알아보자.

------------------------------------------------------------------------------------------------------------------------------

동적 인스턴스 생성 방법

일단 클래스 명을 받아오는 메소드 create(String className) 이 있다고 가정하자.

public <T> T create(String className){}

위의 T를 제네릭으로 설정한 이유는 받아오는 변수명이 어떤 타입의 클래스일지 모르니 제네릭으로 설정을 해두었다.
그럼 이제 메소드가 있으니 한번 동적으로 인스턴스를 생성해보자.

public <T> T create(String className){
  T t = null;
  try{
    t = (T) Class.forName(className).getConstructor().newInstance();
  }catch(ReflectiveOperationException e){
    logger.error("Error to load class");
  }
}

대충 이런 형식으로 코딩을 하면 된다.
하나하나 설명을 하자면 일단 받아온 className 으로 Class.forName()을 통해서 class를 load 한다.
그리고 나서 해당 클래스에서 생성자를 getConstructor()를 통해서 가져온다.
---------------------------------------
※주의※
이때 주의 해야할점은 getConstructor()안에 들어가는 파라미터는 기존의 생성할 클래스 생성자의 파라미터값의 클래스 타입을 지정해주면 된다.
ex) 문자열을 받은 생성자일 경우 -> getConstructor(String.class)
---------------------------------------
그러고 나서 생성자를 가져왔다면 이제 실제로 newInstance()를 통해서 생성을 하자.
---------------------------------------
※주의※
여기서도 마찬가지로 가져올 클래스의 생성자의 파라미터값을 newInstance()안에 넣어준다.
ex) 문자열을 받은 생성자일 경우 -> newInstance(mystring)
(myString은 String 타입의 변수)
---------------------------------------
그런 다음 만들어진 객체 t를 return 하게 되는 구조이다.

