여태 나는 자바로 코딩을 하면서 그저 제네릭을 클래스 타입을 지정하는 정도로만 생각을 하면서 사용해왔다.
하지만 이번에 회사에서 사수분께서 코드 리팩토링을 해준것을 보면서 내가 제네릭에 대해서 잘못알고 있다는것을 알고 제네릭에 대해서 공부를 해보았다.

제네릭이란?
데이터 타입을 클래스 내부에서 지정하는것이 아닌 외부에서 사용자에 의해서 지정되는것을 의미한다.

이걸 이렇게만 들으면 이해가 쉽지 않을수 있다.
쉽게 한번 설명을 해보겠다.
ArrayList나 LinkedList를 생성할때 우리가 <> 안에 클래스 타입을 지정하여 사용하도록 되어 있다.
보통 ArrayList<String> 이런식으로 사용했는데 우리가 <> 안에는 String 뿐만 아니라 우리마 원하는 다른 클래스들도 집어 넣을수 있다.
이게 가능했던 이유는 무엇일까?
ArrayList 클래스를 직접 들어가서 확인을 해보면 <E> 이런식으로 제네릭으로 설정 되어 있어 외부에서 지정한 클래스로도 저장이 가능한것이다.

그렇다면 어떻게 제네릭을 생성 할수 있을까?

제네릭 생성 방법

public class 클래스명 <제네릭> {}

이렇게 생성 하면 된다. 그렇담 <> 안에는 어떤것들이 들어가게 되는지 알아보자.

Type
T : Type, 들어올 타입을 지정
ex) <T>
E : Element, 원소형식을 받아옴
ex) <E>
K : Key, 키값인것을 받아옴
ex) <K>
V : Value, value 값인것을 받아옴
ex) <V>
N : Number, 숫자형식을 받아옴
ex) <N>
? : 모든타입 가능, 모든 타입을 모두 받아옴(인터페이스도 가능), 와일드 카드라고도 함
ex) <?>

제한된 제네릭
제네릭을 사용할때 특정 형식의 제네릭만 받아오도록 제한 시킬수도있다.

extends T : 상한 경계
ex) <E extends T> : T와 T의 자손 타입만 가능
super T : 하한 경계 
ex) <K super T> : T와 T의 부모타입만 가능

제네릭의 장점과 단점

장점
1. 유형 안정성 : 올바른 타입이 올바른 장소에 쓰이고 있는지 확인할수가 있다.
2. 코드 재사용 : 다양한 타입의 개체에 사용할수 있는 클래스와 메소드를 만들수 있어 코드의 재사용성이 높아진다.
3. 성능 향항 : 런타임시 불필요한 유형검사를 피할수 있음으로 성능이 향상 될수 있음

단점 
1. 복잡성 : 타입 매개변수가 작동하는 방식과 이를 올바르게 사용하는 방법을 이해해야하기 때문에 복잡성이 높아질수 있다.
2. 제한 사항 : 위에서 언급한 제한된 제네릭을 사용하게 되면 코드의 유연성이 떨어질수 있다.
3. 성능 오버헤드 : 위에서 언급한대로라면 타입 검사가 필요 없어 성능이 좋아질수 있지만 때때로 타입의 변환으로 인해 성능의 오버헤드가 발생할수도 있다.


