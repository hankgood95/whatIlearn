Thread를 만들고 사용할때 어떤 예제 코드들을 보면 thread.setDaemon(true) 라는 코드를 본적이 있을것이다.

이것은 대체 무엇이면 왜 사용하는것일까

이것을 알기 위해선 일단 자바에서의 Thread 종류 부터 알아야 한다.
자바에서의 Thread는 크게 두가지이다.

1. 일반 Thread
2. 데몬 Thread

일반 Thread 개념부터 자세히 살펴보자.

Thread란?
Thread는 프로세스 안에서 실질적으로 작업을 하는 작업의 단위를 말한다.
(여기서 프로세스는 CPU에 올라가 실행중인 프로그램을 말하고 Thread는 그 프로그램안에서 실행중인 작업의 단위를 뜻한다.)
프로세스 안에서 돌아가는 작업의 단위이기 때문에 이는 JVM에 의해 관리가 된다.
프로세스는 적어도 한개의 쓰레드 즉 Main thread가 존재하며 이위에 thread를 추가 생성하면 멀티 스레드가 되는것이다.

그럼 이제 Thread가 무엇인지 알게 되었으니 데몬 Thread가 뭔지 알아보자.

데몬 Thread란?
데몬 Thread는 우선순위가 낮은 스레드로 백그라운드에서 사용자의 애플리케이션을 보조하는 역할을 하는 스레드라고 한다.
이렇게 말하니 너무 어렵게 느껴지는데 그냥 중요하지 않은 Thread로 그냥 뒤에서 보조하는 Thread 라고 보면 된다.
뭐 대표적인 예로는 GC라고 하는데 GC도 보면 그냥 알아서 뒤에서 보조적으로 메모리를 정리해주는거 보면 알수가 있다.
(그렇다고 GC가 중요하지 않은것은 아니니 그냥 뒤에서 보조하는 역할이라고 생각해보면 될것 같다.)

데몬 thread와 일반 Thread 차이점
이 둘의 가장 큰 차이점은 종료시 JVM이 기다려 주느냐 마느냐이다.
일반 Thread는 Main에서 만든 우선순위 높은 Thread라서 JVM이 종료시에 해당 Thread가 종료될때까지 대기를 해준다.
하지만 데몬스레드는 백그라운드에서 보조만 해주는 시다바리이기때문에 위대하신 JVM께서 데몬스레드따위를 기다리지 않고 그냥 본인이 종료 될때 같이 종료 시켜 버린다.

이처럼 우리가 하는 Tailing 소스에서 setDaemon()을 설정 한 이유는 프로그램이 종료 될때 따로 close() 하지 않고 바로 종료 될수 있도록 하기 위해 setDaemon(true)로 설정한것이다.


