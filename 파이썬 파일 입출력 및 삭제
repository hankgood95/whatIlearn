파이썬에서의 파일 입출력 방법에 대해서 알아보자.

파이썬에서는 자바와 다르게 파일 입출력이 되게 간단하다.
open() 메소드를 사용하면 끝이다. (다만 끝에 close()를 무조건 해줘야 한다. close()가 귀찮다면 with as 문으로 만들면 된다.)

open()에는 아래의 모드들이 있다.

r: 읽기용으로 열기(기본값)
w: 쓰기용으로 열기, 먼저 파일 자르기
x: 파일이 이미 존재하는 경우 실패, 파일이 없는 경우에만 생성
a: 쓰기용으로 열기, 파일이 있으면 파일 끝에 추가
b: 바이너리 모드
t: 텍스트 모드(기본값)
+: 업데이트를 위해 열기(읽기 및 쓰기)

이 3가지 모드를 통해서 파일의 내용을 읽어올수도 쓸수도 있다.


r, 읽기 모드
ex)
with open('file.txt', 'r') as f:
    # Read the contents of the file
    contents = f.read()

# Print the contents of the file
print(contents)

이렇게하면 해당 파일의 디렉토리에있는 파일을 읽어올수가 있다.

-------------------------------------------------------------------------------

w , 쓰기 모드

# Open a file for writing
with open('file.txt', 'w') as f:
    # Write some data to the file
    f.write('Hello, world!')
   
# Open the file for reading
with open('file.txt', 'r') as f:
    # Read the contents of the file
    contents = f.read()

# Print the contents of the file
print(contents)

-------------------------------------------------------------------------------

a, 추가모드

# Open a file for appending
with open('file.txt', 'a') as f:
    # Write some data to the file
    f.write('Hello, world again!')

# Open the file for reading
with open('file.txt', 'r') as f:
    # Read the contents of the file
    contents = f.read()

# Print the contents of the file
print(contents)

기존 파일의 내용에 데이터를 추가한다.

-------------------------------------------------------------------------------

b: 바이너리 모드
이것은 읽어 들일때도 바이트로 읽어 들이고 쓸때도 바이트로 쓴다는 얘기이다.

# Open a file for writing in binary mode
with open('file.bin', 'wb') as f:
    # Write some binary data to the file
    f.write(b'\x48\x65\x6c\x6c\x6f\x20\x57\x6f\x72\x6c\x64\x21')

# Open the file for reading in binary mode
with open('file.bin', 'rb') as f:
    # Read the contents of the file
    contents = f.read()

# Print the contents of the file
print(contents)

-------------------------------------------------------------------------------

t: 텍스트 모드(기본값)
이것은 우리가 파일에 데이터를 쓰고 읽을때의 기본값으로 t를 붙여도 되지만 굳이 붙이지 않아도 상관없다.

-------------------------------------------------------------------------------

+: 업데이트를 위해 열기(읽기 및 쓰기)
이 모드는 읽기와 쓰기를 동시에 할수 있다. 하지만 여기서 중요한 점은 읽기와 쓰기를 할때 모두 커서의 위치로 글을 읽고 쓰는것이기 때문에 seek()를 통해서 
커서의 위치를 잘 조정해줘야 한다.

ex)
# Open a file for reading and writing in truncation mode
with open('file.txt', 'w+') as f:
    # Write some text to the file
    f.write('Hello, world!')

    # Move the file pointer to the beginning of the file
    f.seek(0)

    # Read the contents of the file
    contents = f.read()

# Print the contents of the file
print(contents)

=============================================================================================

파일 삭제하는 방법

아래와 같은 방법으로 파일이 존재하는지 확인해보고 존재한다면 삭제하도록 할수가 있다.
ex)
import os

# Check if the file exists before deleting it
if os.path.exists('file.txt'):
    os.remove('file.txt')
    print('File deleted successfully')
else:
    print('File does not exist')
    
